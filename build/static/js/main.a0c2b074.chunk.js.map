{"version":3,"sources":["components/card/card.component.jsx","components/cardlist/card-list.component.jsx","components/search-box/search-box.components.jsx","components/dropdown/dropdown.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","nm","name","email","CardList","names","map","key","id","SearchBox","type","placeholder","onChange","handleChange","techCompanies","label","value","Dropdown","options","App","state","searchfeild","fetch","then","response","json","user","setState","this","filrertednames","filter","toLowerCase","includes","e","target","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0UAGaA,G,kBAAO,SAAAC,GAAK,OAEjB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,MACJC,IAAK,gDACV,4BAAI,2BAAIH,EAAMI,GAAGC,OACjB,4BAAKL,EAAMI,GAAGE,UCLbC,EAAW,SAAAP,GAAK,OAEzB,yBAAKC,UAAU,aAEPD,EAAMQ,MAAMC,KAAI,SAAAL,GAAE,OACd,kBAAC,EAAD,CAAMM,IAAKN,EAAGO,GAAKP,GAAIA,SCN1BQ,G,MAAY,SAACZ,GAAD,OAEjB,2BACIC,UAAU,GACVY,KAAK,SACLC,YAAad,EAAMc,YACnBC,SAAUf,EAAMgB,iB,OCLtBC,G,MAAgB,CACpB,CAAEC,MAAO,QAASC,MAAO,GACzB,CAAED,MAAO,WAAYC,MAAO,GAC5B,CAAED,MAAO,UAAWC,MAAO,GAC3B,CAAED,MAAO,QAASC,MAAO,GACzB,CAAED,MAAO,SAAUC,MAAO,GAC1B,CAAED,MAAO,WAAYC,MAAO,KAGjBC,EAAW,kBACtB,yBAAKnB,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACb,kBAAC,IAAD,CAAQoB,QAAUJ,KAEpB,yBAAKhB,UAAU,gBC0BNqB,E,YAtCb,aAAe,IAAD,8BACZ,+CACKC,MACH,CACEf,MAAO,GACPgB,YAAa,IALL,E,iFASO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEtB,MAAOqB,S,+BAI/B,IAAD,SACwBE,KAAKR,MAA5Bf,EADD,EACCA,MAAOgB,EADR,EACQA,YACTQ,EAAiBxB,EAAMyB,QAAO,SAAA7B,GAAE,OACpCA,EAAGC,KAAK6B,cAAcC,SAASX,EAAYU,kBAG7C,OACE,yBAAKjC,UAAU,OACb,4BAAI,wCACJ,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEa,YAAY,WACZE,aAAc,SAAAoB,GACZ,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOlB,WAI1C,kBAAC,EAAD,CAAUX,MAAOwB,S,GAnCPM,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.a0c2b074.chunk.js","sourcesContent":["import React from 'react'\nimport './card.css'\n\nexport const Card = props =>\n    (\n        <div className=\"card-container\">\n            <img alt=\"img\"\n                 src={\"https://robohash.org/?set=set2&size=150x150\"}/>\n            <h4><b>{props.nm.name}</b></h4>\n            <h6>{props.nm.email}</h6>\n        </div>\n    )","import React from 'react'\nimport './card-list.css'\nimport {Card} from '../card/card.component'\n\nexport const CardList = props => (\n\n    <div className=\"card_list\">\n        {\n            props.names.map(nm => (\n                <Card key={nm.id}  nm={nm}></Card>\n            ))\n        }\n    </div>\n\n);","import React from 'react'\nimport './search-box.css'\n\nexport const SearchBox = (props) =>\n    (\n        <input\n            className=\"\"\n            type=\"search\"\n            placeholder={props.placeholder}\n            onChange={props.handleChange}\n\n        />\n    )","import React from 'react'\nimport Select from 'react-select';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst techCompanies = [\n  { label: \"Apple\", value: 1 },\n  { label: \"Facebook\", value: 2 },\n  { label: \"Netflix\", value: 3 },\n  { label: \"Tesla\", value: 4 },\n  { label: \"Amazon\", value: 5 },\n  { label: \"Alphabet\", value: 6 },\n];\n\nexport const Dropdown = () => (\n  <div className=\"container\">\n    <div className=\"row\">\n      <div className=\"col-md-4\"></div>\n      <div className=\"col-md-4\">\n        <Select options={ techCompanies } />\n      </div>\n      <div className=\"col-md-4\"></div>\n    </div>\n  </div>\n);\n\n\n","import React from 'react';\nimport './App.css'\nimport { CardList } from './components/cardlist/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.components'\nimport {Dropdown} from './components/dropdown/dropdown.component'\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state =\n      {\n        names: [],\n        searchfeild: ''\n      };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(user => this.setState({ names: user }))\n  }\n\n\n  render() {\n    const { names, searchfeild } = this.state;\n    const filrertednames = names.filter(nm =>\n      nm.name.toLowerCase().includes(searchfeild.toLowerCase())\n\n    )\n    return (\n      <div className=\"App\">\n        <h1><b>Test App</b></h1>\n        <Dropdown></Dropdown>\n        <SearchBox\n          placeholder=\"search..\"\n          handleChange={e => {\n            this.setState({ searchfeild: e.target.value });\n          }\n          }\n        />\n        <CardList names={filrertednames}></CardList>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}